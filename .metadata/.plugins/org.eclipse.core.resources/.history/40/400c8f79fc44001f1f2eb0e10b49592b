package com.ajprogramming.restapi.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ajprogramming.restapi.entity.Student;
import com.ajprogramming.restapi.repository.StudentRepository;

@RestController
public class StudentControler {
	
	@Autowired
	StudentRepository repo;
	
	// Get all the students 
	@GetMapping("/students")  //localHost:8080/students
	public List<Student>getAllStudents(){  //List<> is return type and getAllstud is method name
		List<Student> students =repo.findAll();
		return students;
	}
	
	// Get student by id
	@GetMapping("/student/{id}")  //localHost:8080/students/1
	public Student getStudent(@PathVariable("id") int id) {
		Student student = repo.findById(id).get();
		return student;
	}
	
	//add a new student
	@PostMapping("/student/add")
	@ResponseStatus(code = HttpStatus.CREATED)
	public void createStudent(@RequestBody Student student) {
		repo.save(student);
	}
	
	//update  an existing student data 
	@PutMapping("/student/update/{id}")
    public Student updateStudent(@PathVariable("id") int id, @RequestBody Student studentDetails) {
        Student student = repo.findById(id).orElseThrow(() -> new RuntimeException("Student not found with id " + id));
        
        // Update student fields dynamically
        if (studentDetails.getName() != null) {
            student.setName(studentDetails.getName());
        }
        if (studentDetails.getQualification() != null) {
            student.setQualification(studentDetails.getQualification());
        }
        if (studentDetails.getCourse() != null) {
            student.setCourse(studentDetails.getCourse());
        }
        if (studentDetails.getYearOfPassing() != 0) {
            student.setYearOfPassing(studentDetails.getYearOfPassing());
        }
        if (studentDetails.getCertificate() != null) {
            student.setCertificate(studentDetails.getCertificate());
        }
        if (studentDetails.getHallTicketNumber() != null) {
            student.setHallTicketNumber(studentDetails.getHallTicketNumber());
        }

        return repo.save(student);
    }
	
	//delete an existing student 
	@DeleteMapping("/student/delete/{id}")
	public void removeStudents(@PathVariable("id") int id) {
		Student student = repo.findById(id).get();
		repo.delete(student);
		
	}
	
//	Get Student by Hall ticket
	@GetMapping("/student/hall_ticket_number/{hall_ticket_number}")  //localHost:8080/students/1
	public Student getStudentHall(@PathVariable("hall_ticket_number") String hall_ticket_number) {
		 return repo.findByHallTicketNumber(hall_ticket_number)
	               .orElseThrow(() -> new RuntimeException("Student not found with hall ticket number " + hall_ticket_number));
	}
}
